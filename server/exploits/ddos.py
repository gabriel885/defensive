import asyncio

import aiohttp

xml = """<?xml version="1.0" ?>
<methodCall>
	<methodName>add</methodName>
	<params>
		<param><value><int>12304812</int></value></param>
		<param><value><int>123048127</int></value></param>
	</params>
</methodCall>"""

HOST = "localhost"
PORT = 8000

MAX_CLIENT_CONNECTION = 20000
MAX_REQUESTS_PER_CONNECTIONS = 1000000

async def async_request():
	headers = {'Content-Type': 'application/xml'}  
	async with aiohttp.ClientSession() as session:
		for _ in range(MAX_REQUESTS_PER_CONNECTIONS):
			try:
				await session.post('http://{}:{}'.format(HOST, PORT), data=xml, headers=headers, ssl=False)
			except Exception:
				# ignore exception
				pass


def run_requests_async():
	loop = asyncio.get_event_loop()
	coroutines = [async_request() for _ in range(MAX_CLIENT_CONNECTION)]
	loop.run_until_complete(asyncio.gather(*coroutines))
	pass


if __name__ == '__main__':
	print("setting up connections...")
	run_requests_async()



